{"version":3,"sources":["api.ts","types/SelectFilter.ts","components/Loader/Loader.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","SelectFilter","Loader","className","TodoList","todos","selectedTodoId","onShow","map","todo","isSelected","id","completed","classNames","title","type","onClick","TodoFilter","query","setQuery","reset","selectFilter","setSelectFilter","value","onChange","target","ALL","ACTIVE","COMPLETED","placeholder","event","style","pointerEvents","TodoModal","onClose","useState","user","setUser","isLoading","setIsLoading","fetchUser","useCallback","a","userId","fetchedUser","Error","useEffect","href","email","name","App","setTodos","searchQuery","setSearchQuery","setSelectedTodoId","fetchTodos","responseTodos","showModal","resetSearchQuery","selectedTodo","find","makeLowercase","text","toLocaleLowerCase","visibleTodos","filter","checkIsInclude","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.12c1a129.chunk.js","sourcesContent":["import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum SelectFilter {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodoId: number;\n  onShow: (todo: Todo) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodoId,\n  onShow,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => {\n        const isSelected = todo.id === selectedTodoId;\n\n        return (\n          <tr data-cy=\"todo\" key={todo.id}>\n            <td className=\"is-vcentered\">{todo.id}</td>\n\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames({\n                'has-text-success': todo.completed,\n                'has-text-danger': !todo.completed,\n              })}\n              >\n                {todo.title}\n              </p>\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => onShow(todo)}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('far', {\n                    'fa-eye': !isSelected,\n                    'fa-eye-slash': isSelected,\n                  })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n);\n","import React from 'react';\nimport { SelectFilter } from '../../types/SelectFilter';\n\ntype Props = {\n  query: string;\n  setQuery: (query: string) => void;\n  reset: () => void;\n  selectFilter: SelectFilter;\n  setSelectFilter: (selectFilter: SelectFilter) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  setQuery,\n  reset,\n  selectFilter,\n  setSelectFilter,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={selectFilter}\n          onChange={({ target }) => {\n            setSelectFilter(target.value as SelectFilter);\n          }}\n        >\n          <option value={SelectFilter.ALL}>All</option>\n          <option value={SelectFilter.ACTIVE}>Active</option>\n          <option value={SelectFilter.COMPLETED}>Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={(event) => setQuery(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {query && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={reset}\n            aria-label=\"clear\"\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import classNames from 'classnames';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  todo: Todo | null;\n  onClose: () => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, onClose }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const fetchUser = useCallback(async () => {\n    setIsLoading(true);\n\n    try {\n      const fetchedUser = await getUser(todo?.userId || 0);\n\n      setUser(fetchedUser);\n    } catch (error) {\n      throw new Error('Something went wrong...');\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {isLoading\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${todo?.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={onClose}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {todo?.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                <strong className={\n                  classNames({\n                    'has-text-success': todo?.completed,\n                    'has-text-danger': !todo?.completed,\n                  })\n                }\n                >\n                  {todo?.completed ? 'Done' : 'Planned'}\n                </strong>\n\n                {' by '}\n\n                {user && (\n                  <a href={`mailto:${user.email}`}>\n                    {user.name}\n                  </a>\n                )}\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useState, useEffect, useCallback } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { getTodos } from './api';\nimport { Loader } from './components/Loader';\nimport { SelectFilter } from './types/SelectFilter';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Todo } from './types/Todo';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectFilter, setSelectFilter] = useState<SelectFilter>(\n    SelectFilter.ALL,\n  );\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n\n  const fetchTodos = useCallback(async () => {\n    setIsLoading(true);\n\n    try {\n      const responseTodos = await getTodos();\n\n      setTodos(responseTodos);\n    } catch (error) {\n      throw new Error('Something went wrong...');\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  const showModal = useCallback((todo: Todo) => {\n    setSelectedTodoId(todo.id);\n  }, []);\n\n  const hideModal = () => {\n    setSelectedTodoId(0);\n  };\n\n  const resetSearchQuery = useCallback(() => {\n    setSearchQuery('');\n  }, []);\n\n  const selectedTodo = todos.find((todo) => todo.id === selectedTodoId) || null;\n\n  const makeLowercase = (text: string) => {\n    return text.toLocaleLowerCase();\n  };\n\n  const visibleTodos = todos.filter((todo) => {\n    const checkIsInclude = makeLowercase(todo.title).includes(\n      makeLowercase(searchQuery),\n    );\n\n    switch (selectFilter) {\n      case SelectFilter.ALL:\n        return checkIsInclude;\n\n      case SelectFilter.ACTIVE:\n        return !todo.completed && checkIsInclude;\n\n      case SelectFilter.COMPLETED:\n        return todo.completed && checkIsInclude;\n\n      default:\n        throw new Error('Invalid filter query');\n    }\n  });\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={searchQuery}\n                setQuery={setSearchQuery}\n                reset={resetSearchQuery}\n                selectFilter={selectFilter}\n                setSelectFilter={setSelectFilter}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={visibleTodos}\n                  selectedTodoId={selectedTodoId}\n                  onShow={showModal}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectedTodoId && <TodoModal todo={selectedTodo} onClose={hideModal} />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}